$em-baseline: 16px !default;
$em-fallback: true !default;
$em-px-only: false !default;

// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
@function em-separator($list) {
	@if function-exists("list-separator") == true {
		@return list-separator($list);
	}

	$test-list: ();
	@each $item in $list {
		$test-list: append($test-list, $item, space);
	}

	@return if($test-list == $list, space, comma);
}

@mixin em-baseline($zoom: 100%) {
	font-size: $zoom / 16px * $em-baseline;
}

@function em-convert($to, $values...) {
	$result: ();
	$separator: em-separator($values);

	@each $value in $values {
		@if type-of($value) == "number" and unit($value) == "em" and $to == "px" {
			$result: append($result, $value / 1em * $em-baseline, $separator);
		} @else if type-of($value) == "number" and unit($value) == "px" and $to == "em" {
			$result: append($result, $value / ($em-baseline / 1em), $separator);
		} @else if type-of($value) == "list" {
			$result: append($result, em-convert($to, $value...), $separator);
		} @else {
			$result: append($result, $value, $separator);
		}
	}

	@return if(length($result) == 1, nth($result, 1), $result);
}

@function em($values...) {
	@if $em-px-only {
		@return em-convert(px, $values...);
	} @else {
		@return em-convert(em, $values...);
	}
}

@mixin em($properties, $values...) {
	@if type-of($properties) == "map" {
		@each $property in map-keys($properties) {
			@include em($property, map-get($properties, $property));
		}
	} @else {
		@each $property in $properties {
			@if $em-fallback or $em-px-only {
				#{$property}: em-convert(px, $values...);
			}
			@if not $em-px-only {
				#{$property}: em-convert(em, $values...);
			}
		}
	}
}
